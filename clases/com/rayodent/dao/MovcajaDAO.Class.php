<?php

/**
 * Autogenerated class 
 *  
 *  @author modelBuilder 
 *  @since 14-12-2011
 */
class MovcajaDAO {

    public static function insertarMovcaja(Movcaja $oMovcaja) {
        $db = DbManager::getConnection();
        $cd_movcaja = $oMovcaja->getCd_movcaja();
        $dt_movcaja = $oMovcaja->getDt_movcaja();
        $ds_observacion = $oMovcaja->getDs_observacion();
        $nu_caja = ($oMovcaja->getNu_caja())?$oMovcaja->getNu_caja():0;
        $cd_usuario = $oMovcaja->getCd_usuario();
        $cd_turno = $oMovcaja->getCd_turno();
        $bl_anulacion = $oMovcaja->getBl_anulacion();

        $sql = "INSERT INTO movcaja (dt_movcaja, ds_observacion, nu_caja, cd_usuario, cd_turno, bl_anulacion) VALUES('$dt_movcaja', '$ds_observacion', '$nu_caja', '$cd_usuario', '$cd_turno', $bl_anulacion)";
        $result = $db->sql_query($sql);
        if (!$result) {//hubo un error en la bbdd.
            throw new DBException($db->sql_error());
        }

        $id = $db->sql_nextid();
        $oMovcaja->setCd_movcaja($id);
        $db->sql_freeresult($result);
    }

    public static function getMontoTotal($criterio) {
        /*
         * IF(expr1,expr2,expr3)
         * If expr1 is TRUE (expr1 <> 0 and expr1 <> NULL) then IF() returns expr2; otherwise it returns expr3
         */
        $db = DbManager::getConnection();

        $sql .="SELECT SUM(importe ) AS total FROM (";
        $sql .= " SELECT CA.cd_movcaja, SUM( IF(C.cd_tipoconcepto <> " . CD_TIPO_CONCEPTO_PRACTICA . " OR (C.cd_tipoconcepto = " . CD_TIPO_CONCEPTO_PRACTICA . " AND POS.cd_obrasocial = " . CD_OBRASOCIAL_PARTICULAR . "), MCC.nu_importe * T.nu_coeficiente, 0) ) AS importe ";
        $sql .="FROM movcaja CA, concepto C, tipooperacion T, movcajaconcepto MCC ";
        $sql .= "LEFT JOIN practicaordenpractica POP ON POP.cd_movcajaconcepto = MCC.cd_movcajaconcepto ";
        $sql .= "LEFT JOIN practicaobrasocial POS ON POS.cd_practicaobrasocial = POP.cd_practicaobrasocial ";
        $sql .= $criterio->buildWHERE() . " ";
        $sql .= " AND C.cd_concepto = MCC.cd_concepto ";
        $sql .= "AND T.cd_tipooperacion = C.cd_tipooperacion ";
        $sql .= "AND CA.cd_movcaja = MCC.cd_movcaja ";
        $sql .= "AND ( POS.cd_obrasocial IS NULL OR POS.cd_obrasocial = 12) ";
        $sql .= "GROUP BY CA.cd_movcaja";
        $sql .=") AS caja";

        //echo $sql;
        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $next = $db->sql_fetchassoc($result);
        $cant = $next['total'];
        $db->sql_freeresult($result);
        return ((float) round($cant, 2));
    }
    
 	public static function getMontoTotalPosnet($criterio) {
        /*
         * IF(expr1,expr2,expr3)
         * If expr1 is TRUE (expr1 <> 0 and expr1 <> NULL) then IF() returns expr2; otherwise it returns expr3
         */
        $db = DbManager::getConnection();

        $sql .="SELECT SUM(importe ) AS total FROM (";
        $sql .= " SELECT CA.cd_movcaja, SUM( IF(C.cd_tipoconcepto <> " . CD_TIPO_CONCEPTO_PRACTICA . " OR (C.cd_tipoconcepto = " . CD_TIPO_CONCEPTO_PRACTICA . " AND POS.cd_obrasocial = " . CD_OBRASOCIAL_PARTICULAR . "), MCC.nu_importe * T.nu_coeficiente, 0) ) AS importe ";
        $sql .="FROM movcaja CA, concepto C, tipooperacion T, movcajaconcepto MCC ";
        $sql .= "LEFT JOIN practicaordenpractica POP ON POP.cd_movcajaconcepto = MCC.cd_movcajaconcepto ";
        $sql .= "LEFT JOIN practicaobrasocial POS ON POS.cd_practicaobrasocial = POP.cd_practicaobrasocial ";
        $sql .= $criterio->buildWHERE() . " ";
        $sql .= " AND C.cd_concepto = MCC.cd_concepto AND MCC.bl_tarjeta=1 ";
        $sql .= "AND T.cd_tipooperacion = C.cd_tipooperacion ";
        $sql .= "AND CA.cd_movcaja = MCC.cd_movcaja ";
        $sql .= "AND ( POS.cd_obrasocial IS NULL OR POS.cd_obrasocial = 12) ";
        $sql .= "GROUP BY CA.cd_movcaja";
        $sql .=") AS caja";

        //echo $sql;
        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $next = $db->sql_fetchassoc($result);
        $cant = $next['total'];
        $db->sql_freeresult($result);
        return ((float) round($cant, 2));
    }

    public static function getTotalPlacas($criterio) {
        $db = DbManager::getConnection();
        $sql .="SELECT SUM(importe ) AS total FROM (";
        $sql .= " SELECT MC.cd_movcaja, SUM( MCC.nu_importe * T.nu_coeficiente ) AS importe ";
        $sql .="FROM movcaja MC, concepto C, tipooperacion T, movcajaconcepto MCC ";
        if ($criterio->buildWHERE() != "") {
            $sql .= $criterio->buildWHERE();
            $sql .= " AND ";
        } else {
            $sql .= "WHERE";
        }
        $sql .= " C.cd_concepto = MCC.cd_concepto ";
        $sql .= "AND T.cd_tipooperacion = C.cd_tipooperacion ";
        $sql .= "AND MC.cd_movcaja = MCC.cd_movcaja ";
        $sql .= "AND C.cd_tipoconcepto = " . CD_TIPO_CONCEPTO_GASTOS . " ";
        $sql .= " GROUP BY  MC.cd_movcaja ";
        $sql .=") AS caja";

        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $next = $db->sql_fetchassoc($result);
        $cant = $next['total'];
        $db->sql_freeresult($result);
        return ((float) round($cant, 2));
    }

    public static function getMontoTotalGastos($criterio) {
        $db = DbManager::getConnection();
        $sql .="SELECT SUM(importe ) AS total FROM (";
        $sql .= " SELECT MC.cd_movcaja, SUM( MCC.nu_importe * T.nu_coeficiente ) AS importe ";
        $sql .="FROM movcaja MC, concepto C, tipooperacion T, movcajaconcepto MCC ";
        if ($criterio->buildWHERE() != "") {
            $sql .= $criterio->buildWHERE();
            $sql .= " AND ";
        } else {
            $sql .= "WHERE";
        }
        $sql .= " C.cd_concepto = MCC.cd_concepto ";
        $sql .= "AND T.cd_tipooperacion = C.cd_tipooperacion ";
        $sql .= "AND MC.cd_movcaja = MCC.cd_movcaja ";
        $sql .= "AND C.cd_tipoconcepto = " . CD_TIPO_CONCEPTO_GASTOS . " ";
        $sql .= " GROUP BY  MC.cd_movcaja ";
        $sql .=") AS caja";

        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $next = $db->sql_fetchassoc($result);
        $cant = $next['total'];
        $db->sql_freeresult($result);
        return ((float) round($cant, 2));
    }

    public static function getUltimoProcesocaja($criterio) {
        $db = DbManager::getConnection();
        $sql = "SELECT * FROM menuoption WHERE nombre = 'Arquear anteriores'";
        $result = $db->sql_query($sql);
        $next = $db->sql_fetchassoc($result);
        if ($next == NULL) {
            $sql = "INSERT INTO menuoption (nombre, href, cd_funcion, orden, cd_menugroup, cssclass, descripcion_panel) VALUES('Arquear anteriores', 'doAction?action=arquear_caja_anterior', 288, '4', '8', 'arquearcaja', '')";
            $result = $db->sql_query($sql);
        }
        $sql = "SELECT C.cd_concepto as cd_concepto, CA.cd_movcaja as cd_movcaja, CA.cd_turno  as cd_turno, PC.nu_caja as nu_caja, PC.cd_usuario as cd_usuario";
        $sql .= " FROM procesocaja PC, movcaja CA, movcajaconcepto MCC, concepto C, tipooperacion T ";
        if ($criterio->buildWHERE() != "") {
            $sql .= $criterio->buildWHERE();
            $sql .= " AND ";
        } else {
            $sql .= "WHERE";
        }
        $sql .= " C.cd_concepto =MCC.cd_concepto";
        $sql .= " AND T.cd_tipooperacion =C.cd_tipooperacion";
        $sql .= " AND CA.cd_movcaja = MCC.cd_movcaja";
        $sql .= " AND PC.cd_movcaja = CA.cd_movcaja";
        $sql .= $criterio->buildORDERBY();
        $result = $db->sql_query($sql);
        $next = $db->sql_fetchassoc($result);

        $db->sql_freeresult($result);
        return ($next);
    }

    public static function modificarMovcaja(Movcaja $oMovcaja) {
        $db = DbManager::getConnection();


        $cd_movcaja = $oMovcaja->getCd_movcaja();

        $dt_movcaja = $oMovcaja->getDt_movcaja();

        $ds_observacion = $oMovcaja->getDs_observacion();

        $nu_caja = $oMovcaja->getNu_caja();

        $cd_usuario = $oMovcaja->getCd_usuario();

        $cd_turno = $oMovcaja->getCd_turno();

        $bl_anulacion = $oMovcaja->getBl_anulacion();
        
        $nu_etiquetasimple = ($oMovcaja->getNu_etiquetasimple()==null || trim($oMovcaja->getNu_etiquetasimple())=='' || $oMovcaja->getNu_etiquetasimple()==0)?0:$oMovcaja->getNu_etiquetasimple();
        
        $nu_etiquetadoble = ($oMovcaja->getNu_etiquetadoble()==null || trim($oMovcaja->getNu_etiquetadoble())=='' || $oMovcaja->getNu_etiquetadoble()==0)?0:$oMovcaja->getNu_etiquetadoble();


        $sql = "UPDATE movcaja SET dt_movcaja = '$dt_movcaja', ds_observacion = '$ds_observacion', nu_caja = '$nu_caja', cd_usuario = '$cd_usuario', cd_turno = '$cd_turno', bl_anulacion = '$bl_anulacion', nu_etiquetasimple = '$nu_etiquetasimple', nu_etiquetadoble = '$nu_etiquetadoble' WHERE cd_movcaja = $cd_movcaja ";
        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $db->sql_freeresult($result);
    }

    public static function eliminarMovcaja(Movcaja $oMovcaja) {
        $db = DbManager::getConnection();

        $cd_movcaja = $oMovcaja->getCd_movcaja();

        $sql = "DELETE FROM movcaja WHERE cd_movcaja = $cd_movcaja ";

        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $db->sql_freeresult($result);
    }

    public static function getMovcajas(CriterioBusqueda $criterio) {
        $db = DbManager::getConnection();


        $sql = "SELECT MC.cd_movcaja as MC_cd_movcaja, MC.dt_movcaja as MC_dt_movcaja, MC.ds_observacion as MC_ds_observacion, MC.nu_caja as MC_nu_caja, MC.nu_etiquetasimple as MC_nu_etiquetasimple, MC.nu_etiquetadoble as MC_nu_etiquetadoble, ";
        $sql .=" OP.*, P.* FROM movcaja MC ";
        $sql .= "LEFT JOIN ordenpractica OP ON (OP.cd_movcaja = MC.cd_movcaja) ";
        $sql .= "LEFT JOIN paciente P ON (P.cd_paciente = OP.cd_paciente) ";
        $sql .= $criterio->buildWHERE();
        $sql .= " GROUP BY MC.cd_movcaja ";
        $sql .= $criterio->buildOrderby();
        $sql .= $criterio->buildLIMIT();
        //echo "<br/>" . $sql;
        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $items = ResultFactory::toCollection($db, $result, new MovcajaFactory("MC_"));
        $db->sql_freeresult($result);
        return $items;
    }

    public static function getMovcajasGastos(CriterioBusqueda $criterio) {
        $db = DbManager::getConnection();
        $sql = "SELECT * FROM movcaja MC ";
        $sql .= "INNER JOIN movcajaconcepto MCC ON (MCC.cd_movcaja = MC.cd_movcaja)";
        $sql .= "INNER JOIN concepto C ON (C.cd_concepto = MCC.cd_concepto)";
        $sql .= $criterio->buildWHERE();
        $sql .= " AND C.cd_tipoconcepto = " . CD_TIPO_CONCEPTO_GASTOS;
        $sql .= " GROUP BY MCC.cd_movcaja ";
        $sql .= $criterio->buildLIMIT();

        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $items = ResultFactory::toCollection($db, $result, new MovcajaFactory());
        $db->sql_freeresult($result);
        return $items;
    }

    public static function getMovcajasDeLiquidacion(CriterioBusqueda $criterio) {
        $db = DbManager::getConnection();
        $sql .= "SELECT * ";
        $sql .= "FROM movcaja MC, movcajaconcepto MCC, concepto C, tipooperacion T, practicaordenpractica POP, practicaobrasocial POS";
        $sql .= $criterio->buildWHERE();
        $sql .= " AND C.cd_concepto =MCC.cd_concepto ";
        $sql .= "AND T.cd_tipooperacion =C.cd_tipooperacion ";
        $sql .= "AND MC.cd_movcaja = MCC.cd_movcaja ";
        $sql .= "AND POP.cd_movcajaconcepto = MCC.cd_movcajaconcepto ";
        $sql .= "AND POP.cd_practicaobrasocial = POS.cd_practicaobrasocial ";
        $sql .= "GROUP BY MC.cd_movcaja";
        $sql .= $criterio->buildLIMIT();

        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $items = ResultFactory::toCollection($db, $result, new MovcajaFactory());
        $db->sql_freeresult($result);
        return $items;
    }

    public static function getMontoTotalDeObraSocial($criterio) {
        $db = DbManager::getConnection();
        $sql = "select SUM(importe) as total from (";
        $sql .= "SELECT CA.cd_movcaja, SUM(MCC.nu_importe * T.nu_coeficiente) as importe ";
        $sql .= "FROM movcaja CA, movcajaconcepto MCC, concepto C, tipooperacion T, practicaordenpractica POP, practicaobrasocial POS";
        $sql .= $criterio->buildWHERE();
        $sql .= " AND C.cd_concepto =MCC.cd_concepto ";
        $sql .= "AND T.cd_tipooperacion =C.cd_tipooperacion ";
        $sql .= "AND CA.cd_movcaja = MCC.cd_movcaja ";
        $sql .= "AND POP.cd_movcajaconcepto = MCC.cd_movcajaconcepto ";
        $sql .= "AND POP.cd_practicaobrasocial = POS.cd_practicaobrasocial ";
        $sql .= "GROUP BY CA.cd_movcaja ) as caja";

        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $next = $db->sql_fetchassoc($result);
        $cant = $next['total'];
        $db->sql_freeresult($result);
        return ((int) $cant);
    }

    public static function getCantidadMovcajasDeLiquidacion(CriterioBusqueda $criterio) {
        $db = DbManager::getConnection();

        $sql .= "SELECT count(*) as count ";
        $sql .= "FROM movcaja MC, movcajaconcepto MCC, concepto C, tipooperacion T, practicaordenpractica POP, practicaobrasocial POS ";
        $sql .= $criterio->buildWHERE();
        $sql .= " AND C.cd_concepto =MCC.cd_concepto ";
        $sql .= "AND T.cd_tipooperacion =C.cd_tipooperacion ";
        $sql .= "AND MC.cd_movcaja = MCC.cd_movcaja ";
        $sql .= "AND POP.cd_movcajaconcepto = MCC.cd_movcajaconcepto ";
        $sql .= "AND POP.cd_practicaobrasocial = POS.cd_practicaobrasocial ";
        $sql .= "GROUP BY MC.cd_movcaja";

        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $next = $db->sql_fetchassoc($result);
        $cant = $next['count'];
        $db->sql_freeresult($result);
        return ((int) $cant);
    }

    public static function getCantMovcajas(CriterioBusqueda $criterio) {
        $db = DbManager::getConnection();

        $sql = "SELECT count(DISTINCT MC.cd_movcaja ) as count ";
        $sql .= "FROM movcaja MC ";
        $sql .= "LEFT JOIN ordenpractica OP ON (OP.cd_movcaja = MC.cd_movcaja) ";
        $sql .= "LEFT JOIN paciente P ON (P.cd_paciente = OP.cd_paciente) ";
        $sql .= $criterio->buildWHERE();

        //echo "<br/>" . $sql;
        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $next = $db->sql_fetchassoc($result);
        $cant = $next['count'];
        $db->sql_freeresult($result);
        return ((int) $cant);
    }

    public static function getCantMovcajasGastos(CriterioBusqueda $criterio) {
        $db = DbManager::getConnection();
        $sql = "SELECT count(DISTINCT MC.cd_movcaja ) as count ";
        $sql .= "FROM movcaja MC, movcajaconcepto MCC, concepto C ";
        $sql .= $criterio->buildWHERE();
        $sql .= " AND MC.cd_movcaja = MCC.cd_movcaja ";
        $sql .= "AND C.cd_concepto = MCC.cd_concepto ";
        $sql .= " AND C.cd_tipoconcepto = " . CD_TIPO_CONCEPTO_GASTOS;
        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $next = $db->sql_fetchassoc($result);
        $cant = $next['count'];
        $db->sql_freeresult($result);
        return ((int) $cant);
    }

    public static function getMovcaja(CriterioBusqueda $criterio) {
        $db = DbManager::getConnection();


        $sql = "SELECT * FROM movcaja MC";
        $sql .= " LEFT JOIN usuario U on (MC.cd_usuario = U.cd_usuario)";
        $sql .= " LEFT JOIN turno T on (T.cd_turno = T.cd_turno)";

        $sql .= $criterio->buildFiltro();

        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        if ($db->sql_numrows() > 0) {
            $temp = $db->sql_fetchassoc($result);
            $factory = new MovcajaFactory();
            $obj = $factory->build($temp);
        }
        $db->sql_freeresult($result);
        return $obj;
    }

    public static function getDameProcesoscaja($criterio) {
        $db = DbManager::getConnection();

        $sql = "SELECT CA.*";
        $sql .= " FROM procesocaja PC, movcaja CA, movcajaconcepto MCC, concepto C, tipooperacion T ";
        if ($criterio->buildWHERE() != "") {
            $sql .= $criterio->buildWHERE();
            $sql .= " AND ";
        } else {
            $sql .= "WHERE";
        }
        $sql .= " C.cd_concepto =MCC.cd_concepto";
        $sql .= " AND T.cd_tipooperacion =C.cd_tipooperacion";
        $sql .= " AND CA.cd_movcaja = MCC.cd_movcaja";
        $sql .= " AND PC.cd_movcaja = CA.cd_movcaja";
        $sql .= $criterio->buildORDERBY();
        $result = $db->sql_query($sql);


        $items = ResultFactory::toCollection($db, $result, new MovcajaFactory());
        $db->sql_freeresult($result);
        return $items;
    }

}
?>
