<?php

/**
 * Autogenerated class 
 *  
 *  @author modelBuilder 
 *  @since 14-12-2011
 */
class ProcesocajaDAO {

    public static function insertarProcesocaja(Procesocaja $oProcesocaja) {
        $db = DbManager::getConnection();
        $cd_procesocaja = $oProcesocaja->getCd_procesocaja();
        $nu_caja = ($oProcesocaja->getNu_caja())?$oProcesocaja->getNu_caja():0;
        $cd_turno = $oProcesocaja->getCd_turno();
        $cd_usuario = $oProcesocaja->getCd_usuario();
        $cd_movcaja = $oProcesocaja->getCd_movcaja();
        $cd_estadocaja = ($oProcesocaja->getCd_estadocaja()==null)?0:$oProcesocaja->getCd_estadocaja();
        
        $dt_procesocaja = $oProcesocaja->getDt_procesocaja();
        $nu_importe = $oProcesocaja->getNu_importe();
        $sql = "INSERT INTO procesocaja (nu_caja, cd_turno, cd_usuario, cd_movcaja, cd_estadocaja, dt_procesocaja, nu_importe) VALUES('$nu_caja', '$cd_turno', '$cd_usuario', '$cd_movcaja', '$cd_estadocaja', '$dt_procesocaja', '$nu_importe')";
        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $db->sql_freeresult($result);
    }

    public static function modificarProcesocaja(Procesocaja $oProcesocaja) {
        $db = DbManager::getConnection();


        $cd_procesocaja = $oProcesocaja->getCd_procesocaja();

        $nu_caja = $oProcesocaja->getNu_caja();

        $cd_turno = $oProcesocaja->getCd_turno();

        $cd_usuario = $oProcesocaja->getCd_usuario();

        $cd_movcaja = $oProcesocaja->getCd_movcaja();

        $cd_estadocaja = $oProcesocaja->getCd_estadocaja();

        $dt_procesocaja = $oProcesocaja->getDt_procesocaja();

        $nu_importe = $oProcesocaja->getNu_importe();



        $sql = "UPDATE procesocaja SET nu_caja = '$nu_caja', cd_turno = '$cd_turno', cd_usuario = '$cd_usuario', cd_movcaja = '$cd_movcaja', cd_estadocaja = '$cd_estadocaja', dt_procesocaja = '$dt_procesocaja', nu_importe = '$nu_importe' WHERE cd_procesocaja = $cd_procesocaja ";

        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $db->sql_freeresult($result);
    }

    public static function eliminarProcesocaja(Procesocaja $oProcesocaja) {
        $db = DbManager::getConnection();

        $cd_procesocaja = $oProcesocaja->getCd_procesocaja();

        $sql = "DELETE FROM procesocaja WHERE cd_procesocaja = $cd_procesocaja ";

        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $db->sql_freeresult($result);
    }

    public static function getProcesoscajas(CriterioBusqueda $criterio) {
        $db = DbManager::getConnection();


        $sql = "SELECT * FROM procesocaja ";
        $sql .= $criterio->buildFiltro();
        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $items = ResultFactory::toCollection($db, $result, new ProcesocajaFactory());
        $db->sql_freeresult($result);
        return $items;
    }

    public static function getCantProcesoscajas(CriterioBusqueda $criterio) {
        $db = DbManager::getConnection();


        $sql = "SELECT count(*) as count FROM procesocaja ";
        $sql .= $criterio->buildFiltroSinPaginar();
        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        $next = $db->sql_fetchassoc($result);
        $cant = $next['count'];
        $db->sql_freeresult($result);
        return ((int) $cant);
    }

    public static function getProcesocaja(CriterioBusqueda $criterio) {
        $db = DbManager::getConnection();


        $sql = "SELECT * FROM procesocaja ";
        $sql .= $criterio->buildFiltro();
        $result = $db->sql_query($sql);
        if (!$result)//hubo un error en la bbdd.
            throw new DBException($db->sql_error());

        if ($db->sql_numrows() > 0) {
            $temp = $db->sql_fetchassoc($result);
            $factory = new ProcesocajaFactory();
            $obj = $factory->build($temp);
        }
        $db->sql_freeresult($result);
        return $obj;
    }

}
?>
