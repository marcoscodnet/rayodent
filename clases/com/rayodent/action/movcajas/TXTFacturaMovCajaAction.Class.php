<?phpclass TXTFacturaMovCajaAction extends Action {    protected function getMovcaja() {        $cd_movcaja = FormatUtils::getParam('id', 0);        $criterio = new CriterioBusqueda();        $criterio->addFiltro("MC.cd_movcaja", $cd_movcaja, "=");        $manager = new MovcajaManager();        $oMovcaja = $manager->getMovcaja($criterio);        return $oMovcaja;    }    protected function getTitulo() {        return 'Movimiento de Caja';    }    public function execute() {        try {            $this->execute_pdf();        } catch (GenericException $ex) {//CdtUtils::log_debug("No se puede imprimir la etiqueta porque no hay una práctica.");            $forward = $this->getForwardError();            $this->setDs_forward_params('er=1' . '&msg=' . $ex->getMessage() . '&code=' . $ex->getCode());            return $forward;        }    }    public function execute_pdf() {//tipo de la copia del remito.        $cd_movcaja = FormatUtils::getParam('id', 0);        $oOrdenpractica = $this->getOrdenpractica();        if (!empty($oOrdenpractica)) {            $oMovcaja = $this->getMovcaja();            $pdf = new PDFPrint('P', 'cm', array(20, 20));            $pdf = $this->generarFactura($pdf, $oMovcaja, $cd_movcaja);//para que no haga el forward.            $pdf->Output("factura_$cd_movcaja.pdf", 'D');        } else {            throw new GenericException("No se imprimirá la factura porque el movimiento no tiene prácticas");        }    }    protected function getOrdenpractica() {        $cd_movcaja = FormatUtils::getParam('id', 0);        $criterio = new CriterioBusqueda();        $criterio->addFiltro("OP.cd_movcaja", $cd_movcaja, "=");        $manager = new OrdenpracticaManager();        $oOrdenPractica = $manager->getOrdenpractica($criterio);        return $oOrdenPractica;    }    public function generarFactura($pdf, Movcaja $oMovcaja, $cd_movcaja) {//armamos el pdf.        $pdf->AddPage();        $pdf->SetLeftMargin(0);        $pdf->SetTopMargin(0);        $pdf->SetFont('Arial', '', 10);        $pdf->SetAutoPageBreak(false);        $pdf->SetY(0.9);        $pdf->SetX(12.2);        $pdf->Cell(4, 0.5, substr(FuncionesComunes::fechaHoraMysqlaPHP($oMovcaja->getDt_movcaja()), 0, 10), 0, 0, 'L');        $pdf->SetY(5.9);        $pdf->SetX(3.0);        $pdf->Cell(16, 0.5, "Consumidor Final", 0, 0, 'L');        $pdf->SetY(8.3);        $total = $this->parseMovcajaconcepto($pdf, $oMovcaja);        $importeEnLetras = RYTUtils::num2letras($total);        $pdf->SetY(7.6);        $pdf->SetX(3.5);        $pdf->Cell(16, 0.5, $importeEnLetras, 0, 0, 'L');        return $pdf;    }    public function parseMovcajaconcepto($pdf, $oMovcaja) {//Detalle de la factura ( Concepto + práctica + importe )        $cd_movcaja = $oMovcaja->getCd_movcaja();        $criterio = new CriterioBusqueda();        $criterio->addFiltro("MCC.cd_movcaja", $cd_movcaja, "=");        $movcajaconceptosManager = new MovcajaconceptoManager();        $listado_cajaconceptos = $movcajaconceptosManager->getMovcajaconceptos($criterio);        $total = 0;        $i = 0;        $max_y = $pdf->GetY();        foreach ($listado_cajaconceptos as $key => $oMovCajaConceptos) {            $pdf->SetFont('Arial', '', 9);            $pdf->SetX(3.0);            $cd_tipooperacion = $oMovCajaConceptos->getConcepto()->getCd_tipooperacion();            $coeficiente = $this->getCoeficiente($cd_tipooperacion);            //Si es particular, el valor de la práctica es 0            $y = $max_y;            if ($oMovCajaConceptos->getConcepto()->getCd_tipoconcepto() != CD_TIPO_CONCEPTO_PRACTICA || ($oMovCajaConceptos->getConcepto()->getCd_tipoconcepto() == CD_TIPO_CONCEPTO_PRACTICA && $oMovCajaConceptos->getPracticaordenpractica()->getPracticaobrasocial()->getCd_obrasocial() == CD_OBRASOCIAL_PARTICULAR)) {                $total += $oMovCajaConceptos->getNu_importe() * $coeficiente;            }            $pdf->SetY($max_y);            $pdf->SetX(2.5);            $pdf->MultiCell(4, 0.5, $oMovCajaConceptos->getConcepto()->getDs_concepto(), 0, 'L');            $max_y = $pdf->GetY();            $criterio = new CriterioBusqueda();            $criterio->addFiltro("MCC.cd_movcajaconcepto", $oMovCajaConceptos->getCd_movcajaconcepto(), "=");            $practicaordenpracticaManager = new PracticaordenpracticaManager();            $oPracticaOrdenpractica = $practicaordenpracticaManager->getPracticaordenpractica($criterio);            if (!empty($oPracticaOrdenpractica)) {                if ($i == 0) {                    $pdf->SetY(4.0);                    $pdf->SetX(3.0);                    $pdf->Cell(17, 0.5, $oPracticaOrdenpractica->getOrdenpractica()->getPaciente()->getDs_apynom(), 0, 0, 'L');                    $pdf->SetY(5.0);                    $pdf->SetX(3.0);                    $pdf->Cell(17, 0.5, $oPracticaOrdenpractica->getOrdenpractica()->getPaciente()->getDs_direccion(), 0, 0, 'L');                    $i++;                }                $pdf->SetY($y);                $pdf->SetX(6.5);                $pdf->MultiCell(4, 0.5, ucwords(strtolower($oPracticaOrdenpractica->getPracticaObrasocial()->getPractica()->getDs_practica())), 0, 'L');                if ($pdf->GetY() > $max_y) {                    $max_y = $pdf->GetY();                }                $pdf->SetY($y);                $pdf->SetX(10.5);                $pdf->MultiCell(6, 0.5, $oPracticaOrdenpractica->getPracticaObrasocial()->getObrasocial()->getDs_obrasocial(), 0, 'L');                if ($pdf->GetY() > $max_y) {                    $max_y = $pdf->GetY();                }            } else {                $pdf->Cell(4, 0.5, " ", 0, 0, 'L');                $pdf->Cell(6, 0.5, " ", 0, 0, 'L');            }            $pdf->SetY($y);            $pdf->SetX(14.5);            $pdf->Cell(4, 0.5, "$" . ($oMovCajaConceptos->getNu_importe() * $coeficiente), 0, 1, 'R');        }        $pdf->SetFont('Arial', '', 10);        $pdf->SetX(3.0);        $pdf->SetY(16.0);        $pdf->SetX(3.0);        $pdf->Cell(4, 0.5, "$ " . $total, 0, 1, 'L');        return $total;    }    protected function getCoeficiente($cd_tipooperacion) {        $oTipooperacionmanager = new TipooperacionManager();        return $oTipooperacionmanager->getCoeficiente($cd_tipooperacion);    }    protected function getContenido() {        return false;    }    public function getForwardError() {        return "pdf_etiqueta_movcaja_error";    }}